// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveRobot.h"
#include "../Robot.h"
#include "Joystick.h"

DriveRobot::DriveRobot(): frc::Command()
{
	Requires(Robot::driveTrain.get());
}

// Called just before this Command runs the first time
void DriveRobot::Initialize()
{
	Robot::driveTrain->haltDriving();
}

// Called repeatedly when this Command is scheduled to run
void DriveRobot::Execute()
{
	if ( Robot::driveTrain->getDriveMethod() == false )
	{
		Robot::driveTrain->driveLeftSide( arcadeDrive( true ) );
		Robot::driveTrain->driveRightSide( arcadeDrive( false ) );
	}
	else
	{
		Robot::driveTrain->driveLeftSide( davidDrive( true ) );
		Robot::driveTrain->driveRightSide( davidDrive( false ) );
	}
}

// Make this return true when this Command no longer needs to run execute()
bool DriveRobot::IsFinished()
{
	if ( IsTimedOut() == true )
	{
		return true;
	}
		else
	{
		return false;
	}
}

// Called once after isFinished returns true
void DriveRobot::End()
{
	Robot::driveTrain->haltDriving();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveRobot::Interrupted()
{
	End();
}

double DriveRobot::tankDrive( bool left )
{
	// Set channels
	Robot::oi->getXBox()->SetXChannel(1); // up and down on left stick
	Robot::oi->getXBox()->SetYChannel(5); // up and down on right stick

	// Get raw values
	double leftStick = Robot::oi->getXBox()->GetX();
	double rightStick = Robot::oi->getXBox()->GetY();

	// Apply the deadzone
	leftStick = applyDeadzone( leftStick );
	rightStick = applyDeadzone( rightStick );

	// Get the throttle
	double throttle = getThrottle();

	// TankDrive
	double diff = leftStick - rightStick;
	double delta = 0.10;

	if ( abs(diff) < delta )
	{
		return ( ( leftStick + rightStick ) / 2 ) * throttle;
	}
	else if ( left == true )
	{
		return leftStick * throttle;
	}
	else
	{
		return rightStick * throttle;
	}

}

double DriveRobot::arcadeDrive( bool left )
{
// Get left stick values

	// Set channels
    Robot::oi->getXBox()->SetXChannel(0); // left and right on left stick
    Robot::oi->getXBox()->SetYChannel(1); // up and down on left stick

    // Get raw values
	double leftXAxis = Robot::oi->getXBox()->GetX();
	double leftYAxis = Robot::oi->getXBox()->GetY();

	// Apply the deadzone
	leftXAxis = applyDeadzone( leftXAxis );
	leftYAxis = applyDeadzone( leftYAxis );

// Get right stick values

	// Set channels
	Robot::oi->getXBox()->SetXChannel(4); // left and right on right stick
	Robot::oi->getXBox()->SetYChannel(5); // up and down on right stick

	// Get raw values
	double rightXAxis = Robot::oi->getXBox()->GetX();
	double rightYAxis = Robot::oi->getXBox()->GetY();

	// Apply the deadzone
	rightXAxis = applyDeadzone( rightXAxis );
	rightYAxis = applyDeadzone( rightYAxis );

// Determine which stick to use
	double xAxis, yAxis;
	if ( leftXAxis == 0.0 && leftYAxis == 0.0 )
	{
		xAxis = rightXAxis;
		yAxis = rightYAxis;
	}
	else
	{
		xAxis = leftXAxis;
		yAxis = leftYAxis;
	}

	// Flips and scales down the xAxis
	xAxis = -0.5 * xAxis;

	// Get the throttle
	double throttle = getThrottle();

	// Arcade Drive
	if ( left == true )
	{
		double val = yAxis + xAxis;
		if ( val < -1 )
		{
			val = -1;
		}
		else if ( val > 1 )
		{
			val = 1;
		}
		return val * throttle;
	}
	else
	{
		double val = yAxis - xAxis;
		if ( val < -1 )
		{
			val = -1;
		}
		else if ( val > 1 )
		{
			val = 1;
		}
		return val * throttle;
	}
}

double DriveRobot::davidDrive( bool left )
{
	// Set channels
    Robot::oi->getXBox()->SetXChannel(4); // left and right on right stick
    Robot::oi->getXBox()->SetYChannel(1); // up and down on left stick

    // Get raw values
	double xAxis = Robot::oi->getXBox()->GetX();
	double yAxis = Robot::oi->getXBox()->GetY();

	// Apply the deadzone
	xAxis = applyDeadzone( xAxis );
	yAxis = applyDeadzone( yAxis );

	// Flips and scales down the xAxis
	xAxis = -0.5 * xAxis;

	// Get the throttle
	double throttle = getThrottle();

	// David Drive (Modified arcade)
	if ( left == true )
	{
		double val = yAxis + xAxis;
		if ( val < -1 )
		{
			val = -1;
		}
		else if ( val > 1 )
		{
			val = 1;
		}
		return val * throttle;
	}
	else
	{
		double val = yAxis - xAxis;
		if ( val < -1 )
		{
			val = -1;
		}
		else if ( val > 1 )
		{
			val = 1;
		}
		return val * throttle;
	}
}

double DriveRobot::getThrottle()
{
	Robot::oi->getXBox()->SetThrottleChannel(2);
	double leftThrottle = Robot::oi->getXBox()->GetThrottle();

	Robot::oi->getXBox()->SetThrottleChannel(3);
	double rightThrottle = Robot::oi->getXBox()->GetThrottle();

	if ( leftThrottle > rightThrottle )
	{
		return ( ( ( 1 - leftThrottle ) * 0.75 ) + 0.25 );
	}
	else
	{
		return ( ( ( 1 - rightThrottle ) * 0.75 ) + 0.25 );
	}
}

double DriveRobot::applyDeadzone( double stickValue, double deadzone )
{
	if ( ( stickValue >= -deadzone ) && ( stickValue <= deadzone ) )
	{
		return 0.0;
	}
	else
	{
		return stickValue;
	}
}
