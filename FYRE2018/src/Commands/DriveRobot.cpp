// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveRobot.h"
#include "../Robot.h"
#include "Joystick.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveRobot::DriveRobot(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveRobot::Initialize()
{
	Robot::driveTrain->driveLeftSide( tankDrive( true ) );
	Robot::driveTrain->driveRightSide( tankDrive( false ) );
}

// Called repeatedly when this Command is scheduled to run
void DriveRobot::Execute()
{
	Robot::driveTrain->driveLeftSide( tankDrive( true ) );
	Robot::driveTrain->driveRightSide( tankDrive( false ) );
}

// Make this return true when this Command no longer needs to run execute()
bool DriveRobot::IsFinished()
{
	if ( IsTimedOut() == true )
	{
		return true;
	}
		else
	{
		return false;
	}
}

// Called once after isFinished returns true
void DriveRobot::End()
{
	Robot::driveTrain->haltDriving();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveRobot::Interrupted()
{
	Robot::driveTrain->haltDriving();
}

double DriveRobot::tankDrive( bool left )
{
	double deadzone = 0.10;

	double leftStick = Robot::oi->getXBox()->GetX();
	double rightStick = Robot::oi->getXBox()->GetY();
	double throttle = Robot::oi->getXBox()->GetThrottle();

	if ( ( leftStick >= -deadzone ) && ( leftStick <= deadzone ) )
	{
		leftStick = 0.0;
	}
	if ( ( rightStick >= -deadzone ) && ( rightStick <= deadzone ) )
	{
		rightStick = 0.0;
	}
	throttle = ( ( ( 1 - throttle ) * 0.75 ) + 0.25 );
	double maxSpeed = 1.0;

	// make arcade drive
	if ( left == true )
	{
		return -1 * leftStick * throttle * maxSpeed;
	}
	else
	{
		return rightStick * throttle * maxSpeed;
	}

}

double DriveRobot::arcadeDrive( bool left )
{
	return 0.0;
}
