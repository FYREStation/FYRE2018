// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "MoveLift.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

MoveLift::MoveLift(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::lift.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void MoveLift::Initialize()
{
	Robot::lift->operateLift( 0.0 );
}

// Called repeatedly when this Command is scheduled to run
void MoveLift::Execute()
{
	Robot::lift->operateLift( calculateLiftSpeed() );
}

// Make this return true when this Command no longer needs to run execute()
bool MoveLift::IsFinished()
{
	if ( IsTimedOut() == true )
	{
		return true;
	}
		else
	{
		return false;
	}
}

// Called once after isFinished returns true
void MoveLift::End()
{
	Robot::lift->operateLift( 0.0 );
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveLift::Interrupted()
{
	Robot::lift->operateLift( 0.0 );
}

double MoveLift::calculateLiftSpeed()
{
	double deadzone = 0.10;

	double joyStick = Robot::oi->getLogitech()->GetY();
	double throttle = Robot::oi->getLogitech()->GetThrottle();

	if ( ( joyStick >= -deadzone ) && ( joyStick <= deadzone ) )
	{
		joyStick = 0.0;
	}
	throttle = ( ( ( 1 - throttle ) * 0.75 ) + 0.25 );

	return joyStick * throttle;
}
