// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::driveTrainLeftDriveMotor;
std::shared_ptr<frc::Encoder> RobotMap::driveTrainLeftDriveEncoder;
std::shared_ptr<frc::PIDController> RobotMap::driveTrainLeftSide;
std::shared_ptr<frc::SpeedController> RobotMap::driveTrainRightDriveMotor;
std::shared_ptr<frc::Encoder> RobotMap::driveTrainRightDriveEncoder;
std::shared_ptr<frc::PIDController> RobotMap::driveTrainRightSide;
std::shared_ptr<frc::SpeedController> RobotMap::armsLeftArmMotor;
std::shared_ptr<frc::SpeedController> RobotMap::armsRightArmMotor;
std::shared_ptr<frc::SpeedController> RobotMap::armsHingeMotor;
std::shared_ptr<frc::SpeedController> RobotMap::liftLiftMotor;
std::shared_ptr<frc::AnalogInput> RobotMap::liftDistanceSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveTrainLeftDriveMotor.reset(new frc::Spark(0));
    lw->AddActuator("DriveTrain", "Left Drive Motor", std::static_pointer_cast<frc::Spark>(driveTrainLeftDriveMotor));
    
    driveTrainLeftDriveEncoder.reset(new frc::Encoder(0, 1, false, frc::Encoder::k4X));
    lw->AddSensor("DriveTrain", "Left Drive Encoder", driveTrainLeftDriveEncoder);
    driveTrainLeftDriveEncoder->SetDistancePerPulse(1.0);
    driveTrainLeftDriveEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    driveTrainLeftSide.reset(new frc::PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveTrainLeftDriveEncoder.get(), driveTrainLeftDriveMotor.get(), 0.02));
    lw->AddActuator("DriveTrain", "Left Side", driveTrainLeftSide);
    driveTrainLeftSide->SetContinuous(false); driveTrainLeftSide->SetAbsoluteTolerance(0.2); 
    driveTrainLeftSide->SetOutputRange(-1.0, 1.0);
    SmartDashboard::PutData("Drive Train Left Side", driveTrainLeftSide.get());
    driveTrainRightDriveMotor.reset(new frc::Spark(1));
    lw->AddActuator("DriveTrain", "Right Drive Motor", std::static_pointer_cast<frc::Spark>(driveTrainRightDriveMotor));
    
    driveTrainRightDriveEncoder.reset(new frc::Encoder(2, 3, true, frc::Encoder::k4X));
    lw->AddSensor("DriveTrain", "Right Drive Encoder", driveTrainRightDriveEncoder);
    driveTrainRightDriveEncoder->SetDistancePerPulse(1.0);
    driveTrainRightDriveEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    driveTrainRightSide.reset(new frc::PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ driveTrainRightDriveEncoder.get(), driveTrainRightDriveMotor.get(), 0.02));
    lw->AddActuator("DriveTrain", "Right Side", driveTrainRightSide);
    driveTrainRightSide->SetContinuous(false); driveTrainRightSide->SetAbsoluteTolerance(0.2); 
    driveTrainRightSide->SetOutputRange(-1.0, 1.0);
    SmartDashboard::PutData("Drive Train Right Side", driveTrainRightSide.get());
    armsLeftArmMotor.reset(new frc::Spark(2));
    lw->AddActuator("Arms", "Left Arm Motor", std::static_pointer_cast<frc::Spark>(armsLeftArmMotor));
    
    armsRightArmMotor.reset(new frc::Spark(3));
    lw->AddActuator("Arms", "Right Arm Motor", std::static_pointer_cast<frc::Spark>(armsRightArmMotor));
    
    armsHingeMotor.reset(new frc::Spark(4));
    lw->AddActuator("Arms", "Hinge Motor", std::static_pointer_cast<frc::Spark>(armsHingeMotor));
    
    liftLiftMotor.reset(new frc::Spark(5));
    lw->AddActuator("Lift", "Lift Motor", std::static_pointer_cast<frc::Spark>(liftLiftMotor));
    
    liftDistanceSensor.reset(new frc::AnalogInput(2));
    lw->AddSensor("Lift", "Distance Sensor", liftDistanceSensor);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
