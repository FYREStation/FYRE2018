// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveTrain.h"
#include "../RobotMap.h"
#include "../Commands/DriveRobot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftDriveMotor = RobotMap::driveTrainLeftDriveMotor;
    leftDriveEncoder = RobotMap::driveTrainLeftDriveEncoder;
    leftSide = RobotMap::driveTrainLeftSide;
    rightDriveMotor = RobotMap::driveTrainRightDriveMotor;
    rightDriveEncoder = RobotMap::driveTrainRightDriveEncoder;
    rightSide = RobotMap::driveTrainRightSide;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//
//    double p = 1.0;
//    double i = 0.0;
//    double d = 0.0;
//    leftSide = new frc::PIDController( p, i, d, *std::dynamic_pointer_cast<PIDSource>(leftDriveEncoder), *std::dynamic_pointer_cast<PIDOutput>(leftDriveMotor));
//    rightSide = new frc::PIDController( p, i, d, *std::dynamic_pointer_cast<PIDSource>(rightDriveEncoder), *std::dynamic_pointer_cast<PIDOutput>(rightDriveMotor));
//
//    leftSide->SetTolerance( 0.10 );
//    rightSide->SetTolerance( 0.10 );

}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveRobot());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::driveLeftSide( double value )
{
//	leftSide->SetSetpoint( speed );
//	leftSide->Enable();
	leftDriveMotor->Set( -value );
}

void DriveTrain::driveRightSide( double value )
{
//	rightSide->SetSetpoint( speed );
//	leftSide->Enable();
	rightDriveMotor->Set( value );
}

void DriveTrain::haltDriving()
{
//	leftSide->SetSetpoint( 0.0 );
//	rightSide->SetSetpoint( 0.0 );
//
//	leftSide->Disable();
//	rightSide->Disable();
//
//	leftSide->Reset();
//	rightSide->Reset();

	leftDriveMotor->Set( 0.0 );
	rightDriveMotor->Set( 0.0 );
}
